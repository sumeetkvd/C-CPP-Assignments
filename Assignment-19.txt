(1). Insertion in the Linked List:

Code:


// Insertions method
// in Linked List
#include <bits/stdc++.h>
using namespace std;

// A linked list node
class Node
{
	public:
	int data;
	Node *next;
};


void push(Node** head_ref, int new_data)
{

	// allocating new node
	Node* new_node = new Node();

	// Putting the data
	new_node->data = new_data;

	// Updating head
	new_node->next = (*head_ref);

	// move the head to point to the new node
	(*head_ref) = new_node;
}


void insertAfter(Node* prev_node, int new_data)
{
	// check if the given prev_node is null
	if (prev_node == NULL)
	{
		cout<<"The given previous node cannot be NULL";
		return;
	}

	// allocating new node
	Node* new_node = new Node();

	// putting the data
	new_node->data = new_data;

	// Updating the previous Node
	new_node->next = prev_node->next;

	// Updating the next of prev_node as new_node
	prev_node->next = new_node;
}


void append(Node** head_ref, int new_data)
{

	// allocate node
	Node* new_node = new Node();


	Node *last = *head_ref;

	// putting in the data
	new_node->data = new_data;

	// new node which is pointing at last
	new_node->next = NULL;

	// Checking the Linked List is empty is empty or not
	if (*head_ref == NULL)
	{
		*head_ref = new_node;
		return;
	}

	// If LL is not empty then traverse till the last node 
	while (last->next != NULL)
	{
		last = last->next;
	}

	//Change the next of last node 
	last->next = new_node;
	return;
}


void printList(Node *node)
{
	while (node != NULL)
	{
		cout<<" "<<node->data;
		node = node->next;
	}
}


int main()
{

	Node* head = NULL;
	
	append(&head, 6);
	
	push(&head, 7);
	
	push(&head, 1);
	
	append(&head, 4);
	
	insertAfter(head->next, 2);
	
	insertAfter(head->next, 4);
	
	cout<<"Created Linked list is: ";
	printList(head);
	
	return 0;
}


(2). Reverse and Length of the LinkedList(): 

Code: 

#include 
using namespace std;
 
 
struct Node {
    int data;
    struct Node* next;
    Node(int data)
    {
        this->data = data;
        next = NULL;
    }
};
 
struct LinkedList {
    Node* head;
    LinkedList()
    {
        head = NULL;
    }
 
    Node* reverse(Node* head)
    {
        if (head == NULL || head->next == NULL)
            return head;
        // Recursive call
        Node* rest = reverse(head->next);
        head->next->next = head;
        
        head->next = NULL;
 
        return rest;
    }
	
    int getCount(Node* head)
      {
    // Base Case
    if (head == NULL) {
        return 0;
    }
    // Count this node plus the rest of the list
    else {
        return 1 + getCount(head->next);
    }
}


 
    void print()
    {
        struct Node* temp = head;
        while (temp != NULL) {
            cout << temp->data << " ";
            temp = temp->next;
        }
    }
 
    void push(int data)
    {
        Node* temp = new Node(data);
        temp->next = head;
        head = temp;
    }
};
 
int main()
{
    LinkedList ll;
    ll.push(320);
    ll.push(34);
    ll.push(315);
    ll.push(385);
 
    cout << "Linked List Before Reversing\n";
    ll.print();
 
    ll.head = ll.reverse(ll.head);
 
    cout << "\nLinked List After Reversing \n";
    cout << "Count of nodes is " << getCount(head);
    
    ll.print();
    return 0;
}